{"version":3,"sources":["partials/sider.js","lib/table_data.js","partials/AccessKey.js","partials/BitCoinTableWatcher.js","partials/SpanContainer.js","App.js","serviceWorker.js","index.js"],"names":["Sider","Layout","Header","Content","Footer","SideNav","Menu","SubMenu","ItemGroup","state","collapsed","onCollapse","_this","setState","handleClick","e","console","log","react_default","a","createElement","style","overflow","height","position","left","breakpoint","collapsedWidth","onBreakpoint","broken","type","className","menu","theme","mode","defaultSelectedKeys","Item","key","icon","Component","Data","id","age","gender","race","living","income","shuffleArray","array","Math","floor","random","length","data","size","randomData","i","randomizedIncome","toString","replace","push","setRandomData","columns","title","dataIndex","AccessKey","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","bind","assertThisInitialized","input","value","alert","Route","path","component","partials_SpanContainer","_this2","onSubmit","ref","BitcoinTableWatcher","bitcoinData","show","fetch","then","res","json","table","dataSource","SpanContainer","SpanContainer_Content","margin","padding","background","textAlign","w_h","BitCoinTableWatcher","App","layout","sider","marginLeft","App_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6c9c80c3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Menu, Icon, Layout, Breadcrumb } from 'antd';\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nclass SideNav extends Component {\n  state = { collapsed: false, }\n\n  onCollapse = (collapsed) => {\n    this.setState({ collapsed })\n  }\n  handleClick = (e) => {\n    console.log('click', e)\n  }\n  render () {\n    return (\n      <Sider style={{\n        overflow: 'auto', height: '100vh', position: 'fixed', left: 0,\n      }}\n      breakpoint=\"lg\"\n      collapsedWidth=\"0\"\n      onBreakpoint={(broken) => { console.log(broken); }}\n      onCollapse={(collapsed, type) => { console.log(collapsed, type); }}\n      >\n        <div className=\"logo\" />\n        <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\n          <Menu.Item key=\"1\">\n            <Icon type=\"user\" />\n            <span className=\"nav-text\">Data</span>\n          </Menu.Item>\n        </Menu>\n      </Sider>\n    )\n  }\n}\n\nexport default SideNav;\n/*\n<Menu.Item key=\"2\">\n  <Icon type=\"video-camera\" />\n  <span className=\"nav-text\">nav 2</span>\n</Menu.Item>\n<Menu.Item key=\"3\">\n  <Icon type=\"upload\" />\n  <span className=\"nav-text\">nav 3</span>\n</Menu.Item>\n<Menu.Item key=\"4\">\n  <Icon type=\"bar-chart\" />\n  <span className=\"nav-text\">nav 4</span>\n</Menu.Item>\n<Menu.Item key=\"5\">\n  <Icon type=\"cloud-o\" />\n  <span className=\"nav-text\">nav 5</span>\n</Menu.Item>\n<Menu.Item key=\"6\">\n  <Icon type=\"appstore-o\" />\n  <span className=\"nav-text\">nav 6</span>\n</Menu.Item>\n<Menu.Item key=\"7\">\n  <Icon type=\"team\" />\n  <span className=\"nav-text\">nav 7</span>\n</Menu.Item>\n<Menu.Item key=\"8\">\n  <Icon type=\"shop\" />\n  <span className=\"nav-text\">nav 8</span>\n</Menu.Item>\n*/\n","/* table_data.js\n * Where the main components of the table are filled in\n*/\nfunction Data (key, id, age, gender, race, living, income) {\n    return {\n      key: key,\n      id: id,\n      age: age,\n      gender: gender,\n      race: race,\n      living: living,\n      income: income\n    }\n}\n/**\n * Randomize array element order in-place.\n * Using Durstenfeld shuffle algorithm.\n * Thanks: http://tiny.cc/rypd4y\n */\nfunction shuffleArray(array) {\n    return array[Math.floor(Math.random()*array.length)];\n}\n/* setRandomData {Function}\n * {param} size {Int} - Enter your amount of randomly generated sample data\n * let setOutput: http://tiny.cc/660b4y\n * let age: http://tiny.cc/hcqd4y\n*/\nfunction setRandomData (size) {\n  var randomData = []\n  for (let i = 0; i <= size; i++) {\n    let id = Math.floor(1900 + i)\n    let age = Math.floor(Math.random() * (35-18) + 20);\n    let genderArray = ['Male', 'Female', 'Non-Binary']\n    let raceArray = ['Caucasian', 'African American', 'Hispanic', 'NA'];\n    let livingArray = ['Single', 'Married', 'Divorced', 'NA'];\n    let incomeBase = Math.floor(Math.random() * (50000 - 10000) + 1500);\n    let randomizedIncome = \"$\" + incomeBase.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    /*\n     * {key} - where the participant is in our set\n     * {id} - the randomly generated id given\n     * {age} - age of participant range of [20-30]\n     * {gender} - [m,f,na]\n     * {race} - [w, b, h, na]\n     * {living} - [single, married, divorce, na]\n     * {income} - [0-Infinity]\n    */\n    randomData.push(\n      Data(\n        1+size[i], // key\n        id, // id\n        age, // age\n        shuffleArray(genderArray), // gender\n        shuffleArray(raceArray), // race\n        shuffleArray(livingArray), // living\n        randomizedIncome // income\n      )\n    )\n  }\n  return randomData;\n}\n\nexport const data = setRandomData(6);\nexport const columns = [\n  {title: 'ID',dataIndex: 'id', key: 'id',},\n  {title: 'Age',dataIndex: 'age', key: 'age',},\n  {title: 'Gender',dataIndex: 'gender',key: 'gender',},\n  {title: 'Race',dataIndex: 'race',key: 'race',},\n  {title: 'Living Situation',dataIndex: 'living',key: 'living',},\n  {title: 'Household Income',dataIndex: 'income',key: 'income'}\n]\n","// AccessKey.js\nimport React, { Component, Img } from 'react';\nimport App from '../App'\nimport { Menu, Icon, Layout, Breadcrumb } from 'antd';\n// eslint-disable-next-line\nimport { BrowserRouter as Router, Route, Link, Switch, Redirect } from 'react-router-dom';\nimport SideNav from './sider';\nimport SpanContainer from './SpanContainer';\n\nconst {\n  Header, Content, Footer, Sider,\n} = Layout;\n\nclass AccessKey extends Component {\n  constructor (props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.input = props.input;\n  }\n  handleSubmit (e) {\n    if (this.input.value === '1') {\n      alert('test')\n      return (\n        <Route path=\"/data\" component={<SpanContainer/>} />\n      )\n    }\n  }\n  render () {\n    return (\n      <div>\n      <form onSubmit={this.handleSubmit}>\n        <label> Enter Access Key\n          <input type=\"text\" ref={(input) => this.input = input}/>\n        </label>\n        <input type=\"submit\" value=\"Submit\"/>\n      </form>\n      </div>\n    );\n  }\n}\n\nexport default AccessKey;\n","// BitCoinTableWatcher.js\nimport React, { Component, Img } from 'react';\nimport App from '../App'\nimport { Menu, Icon, Layout, Breadcrumb, Table } from 'antd';\nimport {columns, data, Data} from '../lib/table_data';\nimport AccessKey, {props} from './AccessKey';\n\nclass BitcoinTableWatcher extends Component {\n  constructor () {\n    super(AccessKey);\n  }\n  state = {\n    data : [],\n    bitcoinData: `<ul>\n      {this.state.data.map(li => (\n        <li>{li.name}: {li.price_usd}</li>\n      ))}\n    </ul>`,\n    show: true\n  }\n  async componentDidMount () {\n    await fetch(\"https://api.coinmarketcap.com/v1/ticker/?limit=100\")\n      .then(res => res.json())\n      .then(json => this.setState({ data: json }))\n  }\n  render () {\n    if (this.state.show === true) {\n      return (\n        <div show={this.state.show}>\n          <Table breakpoint=\"lg\" columns={columns} dataSource={data}/>\n        </div>\n      )\n    }\n  }\n}\n\nexport default BitcoinTableWatcher;\n","// SpanContainer.js\nimport React, { Component, Img } from 'react';\nimport App from '../App'\nimport { Menu, Icon, Layout, Breadcrumb } from 'antd';\nimport BitCoinTableWatcher, { state } from './BitCoinTableWatcher';\nimport AccessKey from \"./AccessKey\";\n\nconst { Header, Content, Footer, Sider } = Layout;\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\n\nclass SpanContainer extends Component {\n  render () {\n    let w_h = `width: 1000, height: 1000,minHeight: 280, paddingRight: 50, paddingLeft: 50, paddingTop: 25`;\n    return (\n    <div>\n    <Content style={{ margin: '24px 16px 0', overflow: 'initial' }}>\n      <div style={{ padding: 24, background: '#fff', textAlign: 'center' }}>\n        <h1>Generic Study Data </h1>\n        <div style={{w_h}}>\n          <BitCoinTableWatcher show={false}/>\n        </div>\n      </div>\n    </Content>\n    </div>\n    )\n  }\n}\n\nexport default SpanContainer;\n","// eslint-disable-next-line\nimport React, { Component, Img } from 'react';\n// eslint-disable-next-line\nimport { BrowserRouter as Router, Route, Link, Switch, Redirect } from 'react-router-dom';\n// eslint-disable-next-line\nimport { Card, Badge, Row, Col,\n  Button, Menu, Icon, Layout, Avatar} from 'antd';\n\n// partials\nimport SideNav from './partials/sider';\n//import MainContainer from './partials/MainContainer';\nimport SpanContainer from './partials/SpanContainer';\nimport AccessKey from './partials/AccessKey';\n// css\nimport './App.css';\nimport './app.min.css';\nimport 'antd/dist/antd.css';\n// eslint-disable-next-line\n\nconst {\n  Header, Content, Footer, Sider,\n} = Layout;\n\n\nclass App extends Component {\n  render () {\n    return (\n      <div>\n        <Layout>\n        <SideNav/>\n        <Layout style={{ marginLeft: 200 }}>\n          <SpanContainer />\n          <Footer style={{ textAlign: 'center' }}>\n            Designed by Nicky Laczko\n          </Footer>\n        </Layout>\n      </Layout>\n      </div>\n    )\n  }\n}\n/*<Layout>\n<SideNav/>\n<Layout style={{ marginLeft: 200 }}>\n  <SpanContainer show={false}/>\n  <Footer style={{ textAlign: 'center' }}>\n    Designed by Nicky Laczko\n  </Footer>\n</Layout>\n</Layout>*/\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}